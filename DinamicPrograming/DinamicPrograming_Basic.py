'''
    다이나믹 프로그래밍
    - 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법입니다.
    - 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지
      않도록 합니다.
    - 다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운/바텀업)으로 구성됩니다.
    - 완전 탐색을 이용했을 때 시간 복잡도가 매우 비효율적인 문제도 다이나믹 프로그래밍을
      사용해 시간복잡도를 비약적으로 줄인다.
    - 동적 계획법이라고도 불리며 동적이라는 것은 일반적으로 자료구조에서 동적할당 즉,
      프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법을 의미한 것과는
      달리 별다른 의미 없이 사용된다.
    - 특정 문제가 다음의 조건을 만족할 때 사용할 수 있다.
      1. 최적 부분 구조(Optimal Substructure)
         -> 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를
            해결할 수 있습니다.
      2. 중복되는 부분 문제(Overlapping Subprogram)
         -> 동일한 작은 문제를 반복적으로 해결해야 합니다.

    피보나치 수열
    - 피보나치 수열은 다음과 같은 형태의 수열이며, 다이나믹 프로그래밍으로 효과적으로
      계산할 수 있습니다.
      1 1 2 3 5 8 13 21 34 55 89 ...
    - 프로그래밍에서는 이러한 수열을 배열이나 리스트를 이용해 표현합니다.
'''


# 피보나치 수열
import time

# 선택 정렬 프로그램 성능 측정
start_time = time.time()

def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)

print(fibo(30))

# 측정 종료
end_time = time.time()
# 수행 시간 출력
print("선택 정렬 성능 측정 : ", end_time - start_time)
'''
    위와 같이 단순 재귀 함수로 피보나치 수열을 해결하면 지수 시간 복잡도를 가지게 됩니다.
    예를 들어, 6번째 값을 호출할 때, 2번째 값이 5번이나 호출된다.
    재귀 함수를 사용한다면 시간 복잡도는 O(2^N)으로 fibo(30)을 한다면 10억 가량의 연산을
    수행해야한다.
'''
